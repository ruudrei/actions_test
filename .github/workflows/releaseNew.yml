name: Post release checklist

on:
  release:
    types: [published]

jobs:
  update_discussion:
    runs-on: ubuntu-latest
    permissions:
      discussions: write
      contents: read

    steps:
      - name: Update discussion table
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TITLE: ${{ github.event.release.name }}
          BODY: ${{ github.event.release.body }}
          DISCUSSION_TITLE: "リリース反映チェックリスト"
        run: |
          set -e
          OWNER="${REPO%/*}"
          NAME="${REPO#*/}"

          CUSTOMERS=("株式会社A" "株式会社B" "株式会社C")

          echo "🔍 Repository: $OWNER/$NAME"

          # 対象Discussionを取得
          DISCUSSION_JSON=$(gh api "repos/$OWNER/$NAME/discussions" --paginate)
          DISCUSSION_ID=$(echo "$DISCUSSION_JSON" | jq -r ".[] | select(.title==\"$DISCUSSION_TITLE\") | .node_id" | head -n 1)

          if [ -z "$DISCUSSION_ID" ]; then
            echo "❌ Discussion not found: $DISCUSSION_TITLE"
            exit 1
          fi

          # 現在の本文を取得
          CURRENT_BODY=$(gh api graphql -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Discussion { body }
              }
            }' -f id="$DISCUSSION_ID" --jq '.data.node.body')

          # 既存のテーブルがあるか確認
          if echo "$CURRENT_BODY" | grep -q '^| リリース名'; then
            echo "🧩 既存テーブルに行を追加します"
            TABLE_HEADER=$(echo "$CURRENT_BODY" | grep -m1 '^| リリース名')
            SEPARATOR=$(echo "$CURRENT_BODY" | grep -m1 '^|[-]')
            EXISTING_ROWS=$(echo "$CURRENT_BODY" | grep -v '^| リリース名' | grep -v '^|[-]' || true)

            # 新しいリリース行を生成
            NEW_ROW="| ${TITLE} |"
            for _ in "${CUSTOMERS[@]}"; do
              NEW_ROW="${NEW_ROW} ⬜ |"
            done

            UPDATED_TABLE="${TABLE_HEADER}\n${SEPARATOR}\n${EXISTING_ROWS}\n${NEW_ROW}"

            # テーブル以外の本文部分を残す
            PRE_TABLE_CONTENT=$(echo "$CURRENT_BODY" | sed '/^| リリース名/,$d')
            UPDATED_BODY="${PRE_TABLE_CONTENT}\n${UPDATED_TABLE}"
            # テーブルが存在しない場合の新規作成部を修正
          else
            echo "🆕 新しいテーブルを作成します"

            # ヘッダー行
            HEADER="| リリース名"
            for CUSTOMER in "${CUSTOMERS[@]}"; do
              HEADER="${HEADER} | ${CUSTOMER}"
            done
            HEADER="${HEADER} |"

            # 区切り行
            SEPARATOR="|-------------"
            for _ in "${CUSTOMERS[@]}"; do
              SEPARATOR="${SEPARATOR}|------------"
            done
            SEPARATOR="${SEPARATOR}|"

            # 新しい行
            NEW_ROW="| [${TITLE}](https://github.com/${REPO}/releases/tag/${TITLE})"
            for _ in "${CUSTOMERS[@]}"; do
              NEW_ROW="${NEW_ROW} | ⬜"
            done
            NEW_ROW="${NEW_ROW} |"

            UPDATED_BODY=$(printf "%s\n\n%s\n%s\n%s\n" \
            "### 🧾 顧客別リリース反映状況" \
            "$HEADER" \
            "$SEPARATOR" \
            "$NEW_ROW")
          fi

          # Discussionを更新
          gh api graphql -f query='
            mutation($id: ID!, $body: String!) {
              updateDiscussion(input: {discussionId: $id, body: $body}) {
                discussion { url }
              }
            }' \
            -f id="$DISCUSSION_ID" \
            -f body="$UPDATED_BODY"

          echo "✅ Discussion updated successfully!"
