name: Post release checklist

on:
  release:
    types: [published]

jobs:
  update_discussion:
    runs-on: ubuntu-latest
    permissions:
      discussions: write
      contents: read

    steps:
      - name: Append release info to existing discussion
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TITLE: ${{ github.event.release.name }}
          BODY: ${{ github.event.release.body }}
          DISCUSSION_TITLE: "リリース反映チェックリスト"
        run: |
          set -e
          OWNER="${REPO%/*}"
          NAME="${REPO#*/}"

          echo "🔍 Repository: $OWNER/$NAME"

          # 対象ディスカッションを取得
          DISCUSSION_JSON=$(gh api "repos/$OWNER/$NAME/discussions" --paginate)
          DISCUSSION_ID=$(echo "$DISCUSSION_JSON" | jq -r ".[] | select(.title==\"$DISCUSSION_TITLE\") | .node_id" | head -n 1)

          if [ -z "$DISCUSSION_ID" ]; then
            echo "❌ Discussion not found: $DISCUSSION_TITLE"
            exit 1
          fi

          # 現在の本文を取得
          CURRENT_BODY=$(gh api graphql -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Discussion { body }
              }
            }' -f id="$DISCUSSION_ID" --jq '.data.node.body')

          # 新しいチェックリスト行を構築
          NEW_SECTION=$(cat <<EOF

          ---
          ### 🚀 ${TITLE}
          ${BODY}

          - [ ] 株式会社A
          - [ ] 株式会社B
          - [ ] 株式会社C

          > 更新日: $(date '+%Y-%m-%d %H:%M')
          EOF
          )

          # 本文を連結
          UPDATED_BODY="${CURRENT_BODY}${NEW_SECTION}"

          # Discussionを更新
          gh api graphql -f query='
            mutation($id: ID!, $body: String!) {
              updateDiscussion(input: {discussionId: $id, body: $body}) {
                discussion { url }
              }
            }' \
            -f id="$DISCUSSION_ID" \
            -f body="$UPDATED_BODY"

          echo "✅ Discussion updated successfully!"
